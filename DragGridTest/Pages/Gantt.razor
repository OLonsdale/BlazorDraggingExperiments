@page "/gantt"
@using System.Globalization

<PageTitle>Gantt</PageTitle>

<style>
    table {
        border-collapse: collapse;
        width: 100%;
        table-layout: fixed;
    }

    th, td {
        outline: 1px solid #aaa;
        padding: 0;
        vertical-align: top;
    }

    th.time {
        text-align: center;
        font-weight: 600;
        font-size: 12px;
        height: 28px;
        width: 84px;
    }

    th.machine {
        width: 130px;
        text-align: left;
        padding: 4px 8px;
    }

    th.add {
        width: 64px;
        text-align: center;
    }

    td.machine {
        padding: 4px 8px;
        font-weight: 600;
        white-space: nowrap;
    }

    td.add {
        text-align: center;
    }

    td.slot {
        width: 84px;
        height: 36px;
        position: relative;
        overflow: visible;
    }

    .stack {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
    }

    .slice {
        width: 100%;
    }

    .bar {
        width: 100%;
        height: 100%;
    }

    .bar.handle {
        cursor: ew-resize;
        filter: brightness(0.95);
    }

    .bar.body {
        cursor: grab;
    }

    .toolbar {
        margin-bottom: 8px;
        display: flex;
        gap: 8px;
        align-items: center;
    }

    .legend {
        margin-left: auto;
        opacity: 0.7;
        font-size: 12px;
    }
</style>

<div class="toolbar">
    <button @onclick="() => SetView(CalendarView.Month)">Month</button>
    <button @onclick="() => SetView(CalendarView.Week)">Week</button>
    <button @onclick="() => SetView(CalendarView.Day)">Day</button>
    <span style="margin-left:12px; font-weight:bold;">@ViewTitle</span>
    <button style="margin-left:auto" @onclick="Prev">Prev</button>
    <button @onclick="Today">Today</button>
    <button @onclick="Next">Next</button>
    <span class="legend">Gantt view of machine events â€” drag to move/resize; labels shown</span>
</div>

<table @onmousemove="OnTableMouseMove">
    <thead>
    <tr>
        <th class="machine">Machine</th>
        <th class="add">Add</th>
        @for (int c = 0; c < Cols; c++)
        {
            <th class="time">@HeaderForColumn(c)</th>
        }
    </tr>
    </thead>
    <tbody>
    @foreach (var m in machines)
    {
        <tr>
            <td class="machine">@m.Name</td>
            <td class="add">
                <button title="Add event" @onclick="() => AddEventForMachine(m.Id)">+</button>
            </td>
            @for (int c = 0; c < Cols; c++)
            {
                int slotIdx = c; // 0..Cols-1
                var inSlot = EventsInSlot(m.Id, slotIdx).ToList();
                <td class="slot" @onmouseup="(e) => OnCellMouseUp(e, m.Id, slotIdx)"
                    @onmousemove="(e) => OnCellMouseMove(e, m.Id, slotIdx)">
                    @if (inSlot.Count > 0)
                    {
                        var h = SliceHeight(inSlot.Count);
                        <div class="stack">
                            @foreach (var ev in inSlot)
                            {
                                var sIdx = GetEventStartIndex(ev);
                                var eIdx = GetEventEndIndex(ev);
                                var visStart = Math.Max(0, sIdx);
                                var visEnd = Math.Min(Cols - 1, eIdx);
                                bool overlaps = visStart <= visEnd;
                                <div class="slice" style="height:@h; position:relative;">
                                    @switch (overlaps)
                                    {
                                        case true when visStart == visEnd && slotIdx == visStart:
                                            @if (view == CalendarView.Day)
                                            {
                                                <div style="display:flex; width:100%; height:100%">
                                                    <div class="bar handle" title="Resize start"
                                                         style="background-color:@ev.Color; width:10px; height:100%; display:flex; align-items:center; justify-content:center; user-select:none; border-left:3px solid rgba(0,0,0,0.35);"
                                                         @onmousedown:preventDefault
                                                         @onmousedown="(e) => OnStartMouseDown(e, ev, slotIdx)">
                                                    </div>
                                                    <div class="bar body" title="@ev.Title"
                                                         style="background-color:@ev.Color; flex:1; height:100%; display:flex; align-items:center; padding:0 4px; box-sizing:border-box; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; user-select:none;"
                                                         @onmousedown:preventDefault
                                                         @onmousedown="(e) => OnBodyMouseDown(e, ev, slotIdx)">
                                                        @ev.Title
                                                    </div>
                                                    <div class="bar handle" title="Resize end"
                                                         style="background-color:@ev.Color; width:10px; height:100%; display:flex; align-items:center; justify-content:center; user-select:none; border-right:3px solid rgba(0,0,0,0.35);"
                                                         @onmousedown:preventDefault
                                                         @onmousedown="(e) => OnEndMouseDown(e, ev, slotIdx)">
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div style="display:flex; width:100%; height:100%">
                                                    <div class="bar handle" title="Resize start"
                                                         style="background-color:@ev.Color; width:10px; height:100%; display:flex; align-items:center; justify-content:center; user-select:none; border-left:3px solid rgba(0,0,0,0.35);"
                                                         @onmousedown:preventDefault
                                                         @onmousedown="(e) => OnStartMouseDown(e, ev, slotIdx)">
                                                    </div>
                                                    <div class="bar body" title="@ev.Title"
                                                         style="background-color:@ev.Color; flex:1; height:100%; display:flex; align-items:center; padding:0 4px; box-sizing:border-box; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; user-select:none;">
                                                    </div>
                                                    <div class="bar handle" title="Resize end"
                                                         style="background-color:@ev.Color; width:10px; height:100%; display:flex; align-items:center; justify-content:center; user-select:none; border-right:3px solid rgba(0,0,0,0.35);"
                                                         @onmousedown:preventDefault
                                                         @onmousedown="(e) => OnEndMouseDown(e, ev, slotIdx)">
                                                    </div>
                                                </div>
                                            }
                                            break;
                                        case true when slotIdx == visStart && visStart != visEnd:
                                            @if (view == CalendarView.Day)
                                            {
                                                <div style="display:flex; width:100%; height:100%">
                                                    <div class="bar handle" title="Resize start"
                                                         style="background-color:@ev.Color; width:10px; height:100%; display:flex; align-items:center; justify-content:center; user-select:none; border-left:3px solid rgba(0,0,0,0.35);"
                                                         @onmousedown:preventDefault
                                                         @onmousedown="(e) => OnStartMouseDown(e, ev, slotIdx)">
                                                    </div>
                                                    <div class="bar body" title="@ev.Title"
                                                         style="background-color:@ev.Color; flex:1; height:100%; display:flex; align-items:center; padding:0 4px; box-sizing:border-box; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; user-select:none;"
                                                         @onmousedown:preventDefault
                                                         @onmousedown="(e) => OnBodyMouseDown(e, ev, slotIdx)">
                                                        @ev.Title
                                                    </div>
                                                </div>
                                                <div style="position:absolute; top:0; left:0; width:@SpanWidthPx(visStart, visEnd); height:100%; z-index:4; pointer-events:none;" title="@ev.Title">
                                                    <div style="display:flex; width:100%; height:100%; align-items:center; padding:0 4px; box-sizing:border-box; overflow:hidden; white-space:nowrap; text-overflow:ellipsis;">
                                                        @ev.Title
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div style="display:flex; width:100%; height:100%">
                                                    <div style="display:flex; width:100%; height:100%">
                                                        <div class="bar handle" title="Resize start"
                                                             style="background-color:@ev.Color; width:10px; height:100%; display:flex; align-items:center; justify-content:center; user-select:none; border-left:3px solid rgba(0,0,0,0.35);"
                                                             @onmousedown:preventDefault
                                                             @onmousedown="(e) => OnStartMouseDown(e, ev, slotIdx)">
                                                        </div>
                                                        <div class="bar body" title="@ev.Title"
                                                             style="background-color:@ev.Color; flex:1; height:100%; display:flex; align-items:center; padding:0 4px; box-sizing:border-box; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; user-select:none;">
                                                        </div>
                                                    </div>
                                                </div>
                                                <div style="position:absolute; top:0; left:0; width:@SpanWidthPx(visStart, visEnd); height:100%; z-index:4; pointer-events:none;" title="@ev.Title">
                                                    <div style="display:flex; width:100%; height:100%; align-items:center; padding:0 4px; box-sizing:border-box; overflow:hidden; white-space:nowrap; text-overflow:ellipsis;">
                                                        @ev.Title
                                                    </div>
                                                </div>
                                            }
                                            break;
                                        case true when slotIdx == visEnd && visStart != visEnd:
                                            @if (view == CalendarView.Day)
                                            {
                                                <div style="display:flex; width:100%; height:100%">
                                                    <div class="bar body" title="@ev.Title"
                                                         style="background-color:@ev.Color; flex:1; height:100%; display:flex; align-items:center; padding:0 4px; box-sizing:border-box; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; user-select:none;"
                                                         @onmousedown:preventDefault
                                                         @onmousedown="(e) => OnBodyMouseDown(e, ev, slotIdx)">
                                                    </div>
                                                    <div class="bar handle" title="Resize end"
                                                         style="background-color:@ev.Color; width:10px; height:100%; display:flex; align-items:center; justify-content:center; user-select:none; border-right:3px solid rgba(0,0,0,0.35);"
                                                         @onmousedown:preventDefault
                                                         @onmousedown="(e) => OnEndMouseDown(e, ev, slotIdx)">
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div style="display:flex; width:100%; height:100%">
                                                    <div class="bar body" title="@ev.Title"
                                                         style="background-color:@ev.Color; flex:1; height:100%; display:flex; align-items:center; padding:0 4px; box-sizing:border-box; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; user-select:none;"
                                                         @onmousedown:preventDefault
                                                         @onmousedown="(e) => OnBodyMouseDown(e, ev, slotIdx)">
                                                    </div>
                                                    <div class="bar handle" title="Resize end"
                                                         style="background-color:@ev.Color; width:10px; height:100%; display:flex; align-items:center; justify-content:center; user-select:none; border-right:3px solid rgba(0,0,0,0.35);"
                                                         @onmousedown:preventDefault
                                                         @onmousedown="(e) => OnEndMouseDown(e, ev, slotIdx)">
                                                    </div>
                                                </div>
                                            }
                                            break;
                                        case true:
                                            <div class="bar body" title="@ev.Title"
                                                 style="background-color:@ev.Color; width:100%; height:100%; user-select:none;"
                                                 @onmousedown:preventDefault
                                                 @onmousedown="(e) => OnBodyMouseDown(e, ev, slotIdx)">
                                            </div>
                                            break;
                                    }
                                </div>
                            }
                        </div>
                    }
                    @if (dragging && activeEvent is not null && previewMachineId.HasValue && previewMachineId == m.Id && previewStartIdx >= 0 && slotIdx >= previewStartIdx && slotIdx <= previewEndIdx)
                    {
                        var single = previewStartIdx == previewEndIdx;
                        @if (single)
                        {
                            // Single-slot preview: draw full overlay in this cell
                            <div style="position:absolute; top:0; left:0; right:0; height:100%; z-index:3; opacity:0.45; pointer-events:none;">
                                <div style="display:flex; width:100%; height:100%">
                                    <div class="bar handle" style="background-color:@activeEvent.Color; width:10px; height:100%; user-select:none; border-left:2px dashed rgba(0,0,0,0.6);"></div>
                                    <div class="bar body" style="background-color:@activeEvent.Color; flex:1; height:100%; display:flex; align-items:center; padding:0 4px; box-sizing:border-box; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; user-select:none;">
                                        @activeEvent.Title
                                    </div>
                                    <div class="bar handle" style="background-color:@activeEvent.Color; width:10px; height:100%; user-select:none; border-right:2px dashed rgba(0,0,0,0.6);"></div>
                                </div>
                            </div>
                        }
                        else if (slotIdx == previewStartIdx)
                        {
                            // Start cell of multi-slot preview: left dashed handle + body
                            <div style="position:absolute; top:0; left:0; right:0; height:100%; z-index:3; opacity:0.45; pointer-events:none;">
                                <div style="display:flex; width:100%; height:100%">
                                    <div class="bar handle" style="background-color:@activeEvent.Color; width:10px; height:100%; user-select:none; border-left:2px dashed rgba(0,0,0,0.6);"></div>
                                    <div class="bar body" style="background-color:@activeEvent.Color; flex:1; height:100%; display:flex; align-items:center; padding:0 4px; box-sizing:border-box; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; user-select:none;">
                                        @activeEvent.Title
                                    </div>
                                </div>
                            </div>
                        }
                        else if (slotIdx == previewEndIdx)
                        {
                            // End cell of multi-slot preview: body + right dashed handle
                            <div style="position:absolute; top:0; left:0; right:0; height:100%; z-index:3; opacity:0.45; pointer-events:none;">
                                <div style="display:flex; width:100%; height:100%">
                                    <div class="bar body" style="background-color:@activeEvent.Color; flex:1; height:100%; display:flex; align-items:center; padding:0 4px; box-sizing:border-box; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; user-select:none;"></div>
                                    <div class="bar handle" style="background-color:@activeEvent.Color; width:10px; height:100%; user-select:none; border-right:2px dashed rgba(0,0,0,0.6);"></div>
                                </div>
                            </div>
                        }
                        else
                        {
                            // Middle cells of multi-slot preview: full body overlay
                            <div style="position:absolute; top:0; left:0; right:0; height:100%; z-index:3; opacity:0.3; pointer-events:none;">
                                <div class="bar body" style="background-color:@activeEvent.Color; width:100%; height:100%; user-select:none;"></div>
                            </div>
                        }
                    }
                </td>
            }
        </tr>
    }
    </tbody>
</table>

@code {

    // Views/time axis
    enum CalendarView
    {
        Month,
        Week,
        Day
    }

    CalendarView view = CalendarView.Month;
    DateTime currentDate = DateTime.Today;

    // Domain models
    public class Machine
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public string Name { get; set; } = string.Empty;
    }

    public class MachineEvent
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public Guid MachineId { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Color { get; set; } = "#64B5F6";
    }

    // Sample data
    List<Machine> machines =
    [
        new() { Name = "Lathe-01" },
        new() { Name = "Mill-02" },
        new() { Name = "Cutter-03" }
    ];

    List<MachineEvent> events = new();

    // Initialize sample events tied to machines
    protected override void OnInitialized()
    {
        var rng = new Random(1);
        string[] palette = ["#E57373", "#64B5F6", "#81C784", "#FFD54F", "#BA68C8", "#4DB6AC", "#FF8A65", "#A1887F", "#90A4AE", "#F06292", "#7986CB"];
        DateTime baseDay = DateTime.Today.AddDays(-3);
        // attach a couple events per machine
        foreach (var (m, i) in machines.Select((m, i) => (m, i)))
        {
            var color1 = palette[rng.Next(palette.Length)];
            var color2 = palette[rng.Next(palette.Length)];
            // An all-day style (month/week) or multi-hour (day/week) event
            events.Add(new MachineEvent
            {
                MachineId = m.Id,
                Start = baseDay.AddDays(i + 1).AddHours(8),
                End = baseDay.AddDays(i + 2).AddHours(16),
                Title = $"Job A ({m.Name})",
                Color = color1
            });
            events.Add(new MachineEvent
            {
                MachineId = m.Id,
                Start = baseDay.AddDays(i + 2).AddHours(9),
                End = baseDay.AddDays(i + 2).AddHours(12),
                Title = $"Job B ({m.Name})",
                Color = color2
            });
        }
    }

    // View sizing
    int Cols => view switch
    {
        CalendarView.Month => DaysInMonth(currentDate),
        CalendarView.Week => 7,
        CalendarView.Day => 24,
        _ => 7
    };

    // Headers and view title
    private string ViewTitle => view switch
    {
        CalendarView.Month => currentDate.ToString("Y"),
        CalendarView.Week => $"Week of {WeekStart(currentDate):d}",
        CalendarView.Day => currentDate.ToString("D"),
        _ => string.Empty
    };

    private string HeaderForColumn(int c)
    {
        return view switch
        {
            CalendarView.Month => FirstOfMonth(currentDate).AddDays(c).ToString("dd"),
            CalendarView.Week => WeekStart(currentDate).AddDays(c).ToString("ddd dd"),
            CalendarView.Day => TimeOnly.FromDateTime(DateTime.Today).AddHours(c).ToString("HH:00"),
            _ => string.Empty
        };
    }

    // Time math helpers
    private static DayOfWeek FirstDayOfWeek => CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;

    private static DateTime WeekStart(DateTime d)
    {
        int diff = ((int)d.DayOfWeek - (int)FirstDayOfWeek + 7) % 7;
        return d.Date.AddDays(-diff);
    }

    private static DateTime FirstOfMonth(DateTime d) => new(d.Year, d.Month, 1);
    private static int DaysInMonth(DateTime d) => DateTime.DaysInMonth(d.Year, d.Month);

    private DateTime ViewStart() => view switch
    {
        CalendarView.Month => FirstOfMonth(currentDate),
        CalendarView.Week => WeekStart(currentDate),
        CalendarView.Day => currentDate.Date,
        _ => currentDate.Date
    };

    private TimeSpan SlotSize() => view == CalendarView.Day ? TimeSpan.FromHours(1) : TimeSpan.FromDays(1);

    // Slot mapping: inclusive indices
    private int GetEventStartIndex(MachineEvent ev)
    {
        var start = ViewStart();
        double units = (view == CalendarView.Day) ? (ev.Start - start).TotalHours : (ev.Start - start).TotalDays;
        return (int)Math.Floor(units);
    }

    private int GetEventEndIndex(MachineEvent ev)
    {
        var start = ViewStart();
        double units = (view == CalendarView.Day) ? (ev.End - start).TotalHours : (ev.End - start).TotalDays;
        return (int)Math.Floor(units);
    }

    // Overlap stacking per slot
    private IEnumerable<MachineEvent> EventsInSlot(Guid machineId, int slotIndex)
    {
        foreach (var ev in events)
        {
            if (ev.MachineId != machineId) continue;
            int s = GetEventStartIndex(ev);
            int e = GetEventEndIndex(ev);
            if (slotIndex >= s && slotIndex <= e)
                yield return ev;
        }
    }

    private static string SliceHeight(int count) => count <= 0 ? "0%" : $"{100.0 / count}%";

    private const int SlotPx = 84; // must match th.time/td.slot width
    private static string SpanWidthPx(int startIdx, int endIdx) => $"{(endIdx - startIdx + 1) * SlotPx}px";

    // Fractional helpers (Month/Week): compute fractional positions within a day
    private double StartFracInStartCell(MachineEvent ev, int visStart)
    {
        if (view == CalendarView.Day) return 0;
        var day = ViewStart().AddDays(visStart).Date;
        // If event starts before this day, no left offset
        if (ev.Start <= day) return 0;
        return ev.Start.TimeOfDay.TotalHours / 24.0;
    }

    private double EndFracInEndCell(MachineEvent ev, int visEnd)
    {
        if (view == CalendarView.Day) return 1;
        var day = ViewStart().AddDays(visEnd).Date;
        var dayEnd = day.AddDays(1);
        // If event ends after this day, fill entire cell
        if (ev.End >= dayEnd) return 1;
        return ev.End.TimeOfDay.TotalHours / 24.0;
    }

    private string LeftPercent(double frac) => $"{Math.Clamp(frac, 0, 1) * 100:F4}%";
    private string WidthPercent(double frac) => $"{Math.Clamp(frac, 0, 1) * 100:F4}%";

    private string FractionBoxStyle(double leftFrac, double widthFrac)
        => $"position:absolute; left:{LeftPercent(leftFrac)}; width:{WidthPercent(widthFrac)}; height:100%; z-index:2;";

    private string OverlayLeftPx(int visStart, MachineEvent ev)
    {
        var f = StartFracInStartCell(ev, visStart);
        return $"{f * SlotPx:0.##}px";
    }

    private string OverlayWidthPx(int visStart, int visEnd, MachineEvent ev)
    {
        var fStart = StartFracInStartCell(ev, visStart);
        var fEnd = EndFracInEndCell(ev, visEnd);
        var days = visEnd - visStart;
        var totalDays = days + (fEnd - fStart);
        if (totalDays < 0) totalDays = 0;
        return $"{totalDays * SlotPx:0.##}px";
    }

    // Fractional style helpers for Month/Week
    private string SingleCellFractionStyle(MachineEvent ev, int visStart, int visEnd)
    {
        var fS = StartFracInStartCell(ev, visStart);
        var fE = EndFracInEndCell(ev, visEnd);
        return FractionBoxStyle(fS, Math.Max(0, fE - fS));
    }
    private string StartCellFractionStyle(MachineEvent ev, int visStart)
    {
        var fS = StartFracInStartCell(ev, visStart);
        return FractionBoxStyle(fS, Math.Max(0, 1 - fS));
    }
    private string EndCellFractionStyle(MachineEvent ev, int visEnd)
    {
        var fE = EndFracInEndCell(ev, visEnd);
        return FractionBoxStyle(0, Math.Max(0, fE));
    }

    // Toolbar actions
    private void SetView(CalendarView v)
    {
        view = v;
        StateHasChanged();
    }

    private void Today()
    {
        currentDate = DateTime.Today;
        StateHasChanged();
    }

    private void Prev()
    {
        currentDate = view switch
        {
            CalendarView.Month => currentDate.AddMonths(-1),
            CalendarView.Week => currentDate.AddDays(-7),
            CalendarView.Day => currentDate.AddDays(-1),
            _ => currentDate
        };
        StateHasChanged();
    }

    private void Next()
    {
        currentDate = view switch
        {
            CalendarView.Month => currentDate.AddMonths(1),
            CalendarView.Week => currentDate.AddDays(7),
            CalendarView.Day => currentDate.AddDays(1),
            _ => currentDate
        };
        StateHasChanged();
    }

    // Add event per machine
    private static readonly string[] Palette = { "#E57373", "#64B5F6", "#81C784", "#FFD54F", "#BA68C8", "#4DB6AC", "#FF8A65", "#A1887F", "#90A4AE", "#F06292", "#7986CB" };
    private readonly Random _rng = new();
    private string RandomColor() => Palette[_rng.Next(Palette.Length)];

    private void AddEventForMachine(Guid machineId)
    {
        DateTime start;
        DateTime end;
        if (view == CalendarView.Month)
        {
            start = currentDate.Date;
            end = start; // same day
        }
        else if (view == CalendarView.Week)
        {
            start = WeekStart(currentDate).AddHours(9);
            end = start.AddHours(1);
        }
        else // Day
        {
            start = currentDate.Date.AddHours(9);
            end = start.AddHours(1);
        }

        events.Add(new MachineEvent { MachineId = machineId, Start = start, End = end, Title = $"New Job ({machines.FirstOrDefault(x => x.Id == machineId)?.Name})", Color = RandomColor() });
        StateHasChanged();
    }

    // Drag state and helpers (non-JS interop)
    enum DragMode
    {
        None,
        Move,
        ResizeStart,
        ResizeEnd
    }

    bool dragging = false;
    DragMode dragMode = DragMode.None;
    int dragOffsetSlots = 0;
    MachineEvent? activeEvent = null;

    // Drag preview state
    Guid? previewMachineId = null;
    int previewStartIdx = -1;
    int previewEndIdx = -1;

    // Drag start anchors (for pixel-driven preview)
    double dragStartClientX = 0;
    double dragStartClientY = 0;
    int dragStartStartIdx = 0;
    int dragStartEndIdx = 0;
    int dragStartMachineRow = 0;
    DateTime dragStartStartTime;
    DateTime dragStartEndTime;
    bool usingPixelDragPreview = false;

    private static int Clamp(int v, int min, int max) => Math.Max(min, Math.Min(max, v));
    private static int DeltaFromPixels(double deltaPx, int unitPx)
        => deltaPx >= 0 ? (int)Math.Floor(deltaPx / unitPx) : (int)Math.Ceiling(deltaPx / unitPx);

    private void OnBodyMouseDown(MouseEventArgs e, MachineEvent ev, int slotIdx)
    {
        if (e.Button != 0) return; // left button only
        int sIdx = GetEventStartIndex(ev);
        int eIdx = GetEventEndIndex(ev);
        dragging = true;
        dragMode = DragMode.Move;
        activeEvent = ev;
        dragOffsetSlots = slotIdx - sIdx;
        // Initialize preview immediately so the ghost shows even before leaving the bar
        previewStartIdx = sIdx;
        previewEndIdx = eIdx;
        previewMachineId = ev.MachineId;
        // Record drag anchors
        dragStartClientX = e.ClientX;
        dragStartClientY = e.ClientY;
        dragStartStartIdx = sIdx;
        dragStartEndIdx = eIdx;
        dragStartMachineRow = MachineRowIndex(ev.MachineId);
        dragStartStartTime = ev.Start;
        dragStartEndTime = ev.End;
        usingPixelDragPreview = true;
        StateHasChanged();
    }

    private void OnStartMouseDown(MouseEventArgs e, MachineEvent ev, int slotIdx)
    {
        if (e.Button != 0) return;
        int sIdx = GetEventStartIndex(ev);
        int eIdx = GetEventEndIndex(ev);
        dragging = true;
        dragMode = DragMode.ResizeStart;
        activeEvent = ev;
        // Initialize preview immediately, locked to the original machine for resize
        previewStartIdx = sIdx;
        previewEndIdx = eIdx;
        previewMachineId = ev.MachineId;
        // Record drag anchors
        dragStartClientX = e.ClientX;
        dragStartClientY = e.ClientY;
        dragStartStartIdx = sIdx;
        dragStartEndIdx = eIdx;
        dragStartMachineRow = MachineRowIndex(ev.MachineId);
        usingPixelDragPreview = true;
        StateHasChanged();
    }

    private void OnEndMouseDown(MouseEventArgs e, MachineEvent ev, int slotIdx)
    {
        if (e.Button != 0) return;
        int sIdx = GetEventStartIndex(ev);
        int eIdx = GetEventEndIndex(ev);
        dragging = true;
        dragMode = DragMode.ResizeEnd;
        activeEvent = ev;
        // Initialize preview immediately, locked to the original machine for resize
        previewStartIdx = sIdx;
        previewEndIdx = eIdx;
        previewMachineId = ev.MachineId;
        // Record drag anchors
        dragStartClientX = e.ClientX;
        dragStartClientY = e.ClientY;
        dragStartStartIdx = sIdx;
        dragStartEndIdx = eIdx;
        dragStartMachineRow = MachineRowIndex(ev.MachineId);
        usingPixelDragPreview = true;
        StateHasChanged();
    }

    private void OnCellMouseMove(MouseEventArgs e, Guid machineId, int slotIdx)
    {
        // Keep existing per-cell behavior (useful when not over the wide bar), but when pixel-anchored drag is active, let table-level handler drive the preview entirely.
        if (!dragging || activeEvent is null) return;
        if (usingPixelDragPreview) return; // avoid competing updates that can cause flicker
        // Fallback: behave as before
        int sIdx = GetEventStartIndex(activeEvent);
        int eIdx = GetEventEndIndex(activeEvent);
        int length = eIdx - sIdx;
        switch (dragMode)
        {
            case DragMode.Move:
            {
                int newStartIndex = Clamp(slotIdx - dragOffsetSlots, 0, Cols - 1 - length);
                previewStartIdx = newStartIndex;
                previewEndIdx = newStartIndex + length;
                previewMachineId = machineId;
                break;
            }
            case DragMode.ResizeStart:
            {
                int newStartIndex = Clamp(Math.Min(slotIdx, eIdx), 0, eIdx);
                previewStartIdx = newStartIndex;
                previewEndIdx = eIdx;
                previewMachineId = activeEvent.MachineId;
                break;
            }
            case DragMode.ResizeEnd:
            {
                int newEndIndex = Clamp(Math.Max(slotIdx, sIdx), sIdx, Cols - 1);
                previewStartIdx = sIdx;
                previewEndIdx = newEndIndex;
                previewMachineId = activeEvent.MachineId;
                break;
            }
        }
        StateHasChanged();
    }

    private int MachineRowIndex(Guid machineId)
    {
        for (int i = 0; i < machines.Count; i++) if (machines[i].Id == machineId) return i;
        return 0;
    }

    private void OnTableMouseMove(MouseEventArgs e)
    {
        if (!dragging || activeEvent is null) return;
        // Pixel-driven delta computation
        var dx = e.ClientX - dragStartClientX;
        var dy = e.ClientY - dragStartClientY;
        int dSlots = DeltaFromPixels(dx, SlotPx);
        const int RowPx = 36; // must match td.slot height
        int dRows = DeltaFromPixels(dy, RowPx);

        int length = dragStartEndIdx - dragStartStartIdx;

        switch (dragMode)
        {
            case DragMode.Move:
            {
                int newStartIndex = Clamp(dragStartStartIdx + dSlots, 0, Cols - 1 - length);
                previewStartIdx = newStartIndex;
                previewEndIdx = newStartIndex + length;
                int newRow = Clamp(dragStartMachineRow + dRows, 0, machines.Count - 1);
                previewMachineId = machines[newRow].Id;
                break;
            }
            case DragMode.ResizeStart:
            {
                int newStartIndex = Clamp(dragStartStartIdx + dSlots, 0, dragStartEndIdx);
                previewStartIdx = newStartIndex;
                previewEndIdx = dragStartEndIdx;
                previewMachineId = activeEvent.MachineId; // locked on resize
                break;
            }
            case DragMode.ResizeEnd:
            {
                int newEndIndex = Clamp(dragStartEndIdx + dSlots, dragStartStartIdx, Cols - 1);
                previewStartIdx = dragStartStartIdx;
                previewEndIdx = newEndIndex;
                previewMachineId = activeEvent.MachineId; // locked on resize
                break;
            }
        }
        StateHasChanged();
    }

    private void ClearPreview()
    {
        previewMachineId = null;
        previewStartIdx = -1;
        previewEndIdx = -1;
    }

    private void OnCellMouseUp(MouseEventArgs e, Guid machineId, int slotIdx)
    {
        if (!dragging || activeEvent is null) return;

        var viewStart = ViewStart();
        var slot = SlotSize();

        // Prefer committing from preview (pixel-driven), fallback to cell if preview is not set
        int commitStartIdx = (previewStartIdx >= 0) ? previewStartIdx : GetEventStartIndex(activeEvent);
        int commitEndIdx = (previewEndIdx >= 0) ? previewEndIdx : GetEventEndIndex(activeEvent);
        Guid commitMachineId = previewMachineId ?? activeEvent.MachineId;

        switch (dragMode)
        {
            case DragMode.Move:
            {
                DateTime newStart = viewStart + slot * commitStartIdx;
                DateTime newEnd = viewStart + slot * commitEndIdx;
                activeEvent.Start = newStart;
                activeEvent.End = newEnd;
                activeEvent.MachineId = commitMachineId;
                break;
            }
            case DragMode.ResizeStart:
            {
                activeEvent.Start = viewStart + slot * commitStartIdx;
                break;
            }
            case DragMode.ResizeEnd:
            {
                activeEvent.End = viewStart + slot * commitEndIdx;
                break;
            }
        }

        dragging = false;
        dragMode = DragMode.None;
        activeEvent = null;
        usingPixelDragPreview = false;
        ClearPreview();
        StateHasChanged();
    }

}